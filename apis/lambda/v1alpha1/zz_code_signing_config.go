/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// CodeSigningConfigParameters defines the desired state of CodeSigningConfig
type CodeSigningConfigParameters struct {
	// Region is which region the CodeSigningConfig will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Signing profiles for this code signing configuration.
	// +kubebuilder:validation:Required
	AllowedPublishers *AllowedPublishers `json:"allowedPublishers"`
	// The code signing policies define the actions to take if the validation checks
	// fail.
	CodeSigningPolicies *CodeSigningPolicies `json:"codeSigningPolicies,omitempty"`
	// Descriptive name for this code signing configuration.
	Description                       *string `json:"description,omitempty"`
	CustomCodeSigningConfigParameters `json:",inline"`
}

// CodeSigningConfigSpec defines the desired state of CodeSigningConfig
type CodeSigningConfigSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CodeSigningConfigParameters `json:"forProvider"`
}

// CodeSigningConfigObservation defines the observed state of CodeSigningConfig
type CodeSigningConfigObservation struct {
	// The Amazon Resource Name (ARN) of the Code signing configuration.
	CodeSigningConfigARN *string `json:"codeSigningConfigARN,omitempty"`
	// Unique identifer for the Code signing configuration.
	CodeSigningConfigID *string `json:"codeSigningConfigID,omitempty"`
	// The date and time that the Code signing configuration was last modified,
	// in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sTZD).
	LastModified *string `json:"lastModified,omitempty"`
}

// CodeSigningConfigStatus defines the observed state of CodeSigningConfig.
type CodeSigningConfigStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CodeSigningConfigObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// CodeSigningConfig is the Schema for the CodeSigningConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CodeSigningConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CodeSigningConfigSpec   `json:"spec,omitempty"`
	Status            CodeSigningConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodeSigningConfigList contains a list of CodeSigningConfigs
type CodeSigningConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CodeSigningConfig `json:"items"`
}

// Repository type metadata.
var (
	CodeSigningConfigKind             = "CodeSigningConfig"
	CodeSigningConfigGroupKind        = schema.GroupKind{Group: Group, Kind: CodeSigningConfigKind}.String()
	CodeSigningConfigKindAPIVersion   = CodeSigningConfigKind + "." + GroupVersion.String()
	CodeSigningConfigGroupVersionKind = GroupVersion.WithKind(CodeSigningConfigKind)
)

func init() {
	SchemeBuilder.Register(&CodeSigningConfig{}, &CodeSigningConfigList{})
}

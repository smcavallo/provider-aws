/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package codesigningconfig

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/lambda"

	svcapitypes "github.com/crossplane/provider-aws/apis/lambda/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetCodeSigningConfigInput returns input for read
// operation.
func GenerateGetCodeSigningConfigInput(cr *svcapitypes.CodeSigningConfig) *svcsdk.GetCodeSigningConfigInput {
	res := &svcsdk.GetCodeSigningConfigInput{}

	if cr.Status.AtProvider.CodeSigningConfigARN != nil {
		res.SetCodeSigningConfigArn(*cr.Status.AtProvider.CodeSigningConfigARN)
	}

	return res
}

// GenerateCodeSigningConfig returns the current state in the form of *svcapitypes.CodeSigningConfig.
func GenerateCodeSigningConfig(resp *svcsdk.GetCodeSigningConfigOutput) *svcapitypes.CodeSigningConfig {
	cr := &svcapitypes.CodeSigningConfig{}

	if resp.CodeSigningConfig.CodeSigningConfigArn != nil {
		cr.Status.AtProvider.CodeSigningConfigARN = resp.CodeSigningConfig.CodeSigningConfigArn
	}
	if resp.CodeSigningConfig.CodeSigningConfigId != nil {
		cr.Status.AtProvider.CodeSigningConfigID = resp.CodeSigningConfig.CodeSigningConfigId
	}
	if resp.CodeSigningConfig.LastModified != nil {
		cr.Status.AtProvider.LastModified = resp.CodeSigningConfig.LastModified
	}

	return cr
}

// GenerateCreateCodeSigningConfigInput returns a create input.
func GenerateCreateCodeSigningConfigInput(cr *svcapitypes.CodeSigningConfig) *svcsdk.CreateCodeSigningConfigInput {
	res := &svcsdk.CreateCodeSigningConfigInput{}

	if cr.Spec.ForProvider.AllowedPublishers != nil {
		f0 := &svcsdk.AllowedPublishers{}
		if cr.Spec.ForProvider.AllowedPublishers.SigningProfileVersionARNs != nil {
			f0f0 := []*string{}
			for _, f0f0iter := range cr.Spec.ForProvider.AllowedPublishers.SigningProfileVersionARNs {
				var f0f0elem string
				f0f0elem = *f0f0iter
				f0f0 = append(f0f0, &f0f0elem)
			}
			f0.SetSigningProfileVersionArns(f0f0)
		}
		res.SetAllowedPublishers(f0)
	}
	if cr.Spec.ForProvider.CodeSigningPolicies != nil {
		f1 := &svcsdk.CodeSigningPolicies{}
		if cr.Spec.ForProvider.CodeSigningPolicies.UntrustedArtifactOnDeployment != nil {
			f1.SetUntrustedArtifactOnDeployment(*cr.Spec.ForProvider.CodeSigningPolicies.UntrustedArtifactOnDeployment)
		}
		res.SetCodeSigningPolicies(f1)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}

	return res
}

// GenerateUpdateCodeSigningConfigInput returns an update input.
func GenerateUpdateCodeSigningConfigInput(cr *svcapitypes.CodeSigningConfig) *svcsdk.UpdateCodeSigningConfigInput {
	res := &svcsdk.UpdateCodeSigningConfigInput{}

	if cr.Spec.ForProvider.AllowedPublishers != nil {
		f0 := &svcsdk.AllowedPublishers{}
		if cr.Spec.ForProvider.AllowedPublishers.SigningProfileVersionARNs != nil {
			f0f0 := []*string{}
			for _, f0f0iter := range cr.Spec.ForProvider.AllowedPublishers.SigningProfileVersionARNs {
				var f0f0elem string
				f0f0elem = *f0f0iter
				f0f0 = append(f0f0, &f0f0elem)
			}
			f0.SetSigningProfileVersionArns(f0f0)
		}
		res.SetAllowedPublishers(f0)
	}
	if cr.Status.AtProvider.CodeSigningConfigARN != nil {
		res.SetCodeSigningConfigArn(*cr.Status.AtProvider.CodeSigningConfigARN)
	}
	if cr.Spec.ForProvider.CodeSigningPolicies != nil {
		f2 := &svcsdk.CodeSigningPolicies{}
		if cr.Spec.ForProvider.CodeSigningPolicies.UntrustedArtifactOnDeployment != nil {
			f2.SetUntrustedArtifactOnDeployment(*cr.Spec.ForProvider.CodeSigningPolicies.UntrustedArtifactOnDeployment)
		}
		res.SetCodeSigningPolicies(f2)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}

	return res
}

// GenerateDeleteCodeSigningConfigInput returns a deletion input.
func GenerateDeleteCodeSigningConfigInput(cr *svcapitypes.CodeSigningConfig) *svcsdk.DeleteCodeSigningConfigInput {
	res := &svcsdk.DeleteCodeSigningConfigInput{}

	if cr.Status.AtProvider.CodeSigningConfigARN != nil {
		res.SetCodeSigningConfigArn(*cr.Status.AtProvider.CodeSigningConfigARN)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}

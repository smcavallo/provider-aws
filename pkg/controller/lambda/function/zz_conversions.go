/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package function

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/lambda"

	svcapitypes "github.com/crossplane/provider-aws/apis/lambda/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetFunctionInput returns input for read
// operation.
func GenerateGetFunctionInput(cr *svcapitypes.Function) *svcsdk.GetFunctionInput {
	res := &svcsdk.GetFunctionInput{}

	if cr.Spec.ForProvider.FunctionName != nil {
		res.SetFunctionName(*cr.Spec.ForProvider.FunctionName)
	}

	return res
}

// GenerateFunction returns the current state in the form of *svcapitypes.Function.
func GenerateFunction(resp *svcsdk.GetFunctionOutput) *svcapitypes.Function {
	cr := &svcapitypes.Function{}

	return cr
}

// GenerateCreateFunctionInput returns a create input.
func GenerateCreateFunctionInput(cr *svcapitypes.Function) *svcsdk.CreateFunctionInput {
	res := &svcsdk.CreateFunctionInput{}

	if cr.Spec.ForProvider.Code != nil {
		f0 := &svcsdk.FunctionCode{}
		if cr.Spec.ForProvider.Code.ImageURI != nil {
			f0.SetImageUri(*cr.Spec.ForProvider.Code.ImageURI)
		}
		if cr.Spec.ForProvider.Code.S3Bucket != nil {
			f0.SetS3Bucket(*cr.Spec.ForProvider.Code.S3Bucket)
		}
		if cr.Spec.ForProvider.Code.S3Key != nil {
			f0.SetS3Key(*cr.Spec.ForProvider.Code.S3Key)
		}
		if cr.Spec.ForProvider.Code.S3ObjectVersion != nil {
			f0.SetS3ObjectVersion(*cr.Spec.ForProvider.Code.S3ObjectVersion)
		}
		if cr.Spec.ForProvider.Code.ZipFile != nil {
			f0.SetZipFile(cr.Spec.ForProvider.Code.ZipFile)
		}
		res.SetCode(f0)
	}
	if cr.Spec.ForProvider.CodeSigningConfigARN != nil {
		res.SetCodeSigningConfigArn(*cr.Spec.ForProvider.CodeSigningConfigARN)
	}
	if cr.Spec.ForProvider.DeadLetterConfig != nil {
		f2 := &svcsdk.DeadLetterConfig{}
		if cr.Spec.ForProvider.DeadLetterConfig.TargetARN != nil {
			f2.SetTargetArn(*cr.Spec.ForProvider.DeadLetterConfig.TargetARN)
		}
		res.SetDeadLetterConfig(f2)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.Environment != nil {
		f4 := &svcsdk.Environment{}
		if cr.Spec.ForProvider.Environment.Variables != nil {
			f4f0 := map[string]*string{}
			for f4f0key, f4f0valiter := range cr.Spec.ForProvider.Environment.Variables {
				var f4f0val string
				f4f0val = *f4f0valiter
				f4f0[f4f0key] = &f4f0val
			}
			f4.SetVariables(f4f0)
		}
		res.SetEnvironment(f4)
	}
	if cr.Spec.ForProvider.FileSystemConfigs != nil {
		f5 := []*svcsdk.FileSystemConfig{}
		for _, f5iter := range cr.Spec.ForProvider.FileSystemConfigs {
			f5elem := &svcsdk.FileSystemConfig{}
			if f5iter.ARN != nil {
				f5elem.SetArn(*f5iter.ARN)
			}
			if f5iter.LocalMountPath != nil {
				f5elem.SetLocalMountPath(*f5iter.LocalMountPath)
			}
			f5 = append(f5, f5elem)
		}
		res.SetFileSystemConfigs(f5)
	}
	if cr.Spec.ForProvider.FunctionName != nil {
		res.SetFunctionName(*cr.Spec.ForProvider.FunctionName)
	}
	if cr.Spec.ForProvider.Handler != nil {
		res.SetHandler(*cr.Spec.ForProvider.Handler)
	}
	if cr.Spec.ForProvider.ImageConfig != nil {
		f8 := &svcsdk.ImageConfig{}
		if cr.Spec.ForProvider.ImageConfig.Command != nil {
			f8f0 := []*string{}
			for _, f8f0iter := range cr.Spec.ForProvider.ImageConfig.Command {
				var f8f0elem string
				f8f0elem = *f8f0iter
				f8f0 = append(f8f0, &f8f0elem)
			}
			f8.SetCommand(f8f0)
		}
		if cr.Spec.ForProvider.ImageConfig.EntryPoint != nil {
			f8f1 := []*string{}
			for _, f8f1iter := range cr.Spec.ForProvider.ImageConfig.EntryPoint {
				var f8f1elem string
				f8f1elem = *f8f1iter
				f8f1 = append(f8f1, &f8f1elem)
			}
			f8.SetEntryPoint(f8f1)
		}
		if cr.Spec.ForProvider.ImageConfig.WorkingDirectory != nil {
			f8.SetWorkingDirectory(*cr.Spec.ForProvider.ImageConfig.WorkingDirectory)
		}
		res.SetImageConfig(f8)
	}
	if cr.Spec.ForProvider.KMSKeyARN != nil {
		res.SetKMSKeyArn(*cr.Spec.ForProvider.KMSKeyARN)
	}
	if cr.Spec.ForProvider.Layers != nil {
		f10 := []*string{}
		for _, f10iter := range cr.Spec.ForProvider.Layers {
			var f10elem string
			f10elem = *f10iter
			f10 = append(f10, &f10elem)
		}
		res.SetLayers(f10)
	}
	if cr.Spec.ForProvider.MemorySize != nil {
		res.SetMemorySize(*cr.Spec.ForProvider.MemorySize)
	}
	if cr.Spec.ForProvider.PackageType != nil {
		res.SetPackageType(*cr.Spec.ForProvider.PackageType)
	}
	if cr.Spec.ForProvider.Publish != nil {
		res.SetPublish(*cr.Spec.ForProvider.Publish)
	}
	if cr.Spec.ForProvider.Role != nil {
		res.SetRole(*cr.Spec.ForProvider.Role)
	}
	if cr.Spec.ForProvider.Runtime != nil {
		res.SetRuntime(*cr.Spec.ForProvider.Runtime)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f16 := map[string]*string{}
		for f16key, f16valiter := range cr.Spec.ForProvider.Tags {
			var f16val string
			f16val = *f16valiter
			f16[f16key] = &f16val
		}
		res.SetTags(f16)
	}
	if cr.Spec.ForProvider.Timeout != nil {
		res.SetTimeout(*cr.Spec.ForProvider.Timeout)
	}
	if cr.Spec.ForProvider.TracingConfig != nil {
		f18 := &svcsdk.TracingConfig{}
		if cr.Spec.ForProvider.TracingConfig.Mode != nil {
			f18.SetMode(*cr.Spec.ForProvider.TracingConfig.Mode)
		}
		res.SetTracingConfig(f18)
	}
	if cr.Spec.ForProvider.VPCConfig != nil {
		f19 := &svcsdk.VpcConfig{}
		if cr.Spec.ForProvider.VPCConfig.SecurityGroupIDs != nil {
			f19f0 := []*string{}
			for _, f19f0iter := range cr.Spec.ForProvider.VPCConfig.SecurityGroupIDs {
				var f19f0elem string
				f19f0elem = *f19f0iter
				f19f0 = append(f19f0, &f19f0elem)
			}
			f19.SetSecurityGroupIds(f19f0)
		}
		if cr.Spec.ForProvider.VPCConfig.SubnetIDs != nil {
			f19f1 := []*string{}
			for _, f19f1iter := range cr.Spec.ForProvider.VPCConfig.SubnetIDs {
				var f19f1elem string
				f19f1elem = *f19f1iter
				f19f1 = append(f19f1, &f19f1elem)
			}
			f19.SetSubnetIds(f19f1)
		}
		res.SetVpcConfig(f19)
	}

	return res
}

// GenerateDeleteFunctionInput returns a deletion input.
func GenerateDeleteFunctionInput(cr *svcapitypes.Function) *svcsdk.DeleteFunctionInput {
	res := &svcsdk.DeleteFunctionInput{}

	if cr.Spec.ForProvider.FunctionName != nil {
		res.SetFunctionName(*cr.Spec.ForProvider.FunctionName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
